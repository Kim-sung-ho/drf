 1. args, kwargs를 사용하는 예제 코드 짜보기 (전체적으로 한번 짜보기)
# print 함수를 한 번 감싸서, 같은 기능을 하는 함수를 구현한다고 생각해보자.

# def print_hello(contents):
# print(contents)

# print_hello("Hello World")
# print_hello("Hello", "World")
# TypeError: print_hello() takes 1 positional argument but 2 were given 오류가 뜬다.

# 매개변수 ‘contents’ 앞에 애스터리스크(*)를 붙여주었다.
# def print_hello(*contents):
#     print(*contents) # unpacking은 앞에 *를 붙이면 된다.
#     #unpacking 해주지않으면 ('hello',)나('hello', 'world')
#
# print_hello("Hello")
# print_hello("Hello", "World")

############정리###########
# my_print 함수에는 “hello”, “world” 두 개의 인자를 packing하여('hello', 'world') 형태로 넘겨주었고,
# print 함수에는('hello', 'world') 를 다시 unpacking하여 “hello”, “world” 형태로 넘겨준 것이다.
# 즉, 특정 함수를 정의할때 “매개변수에 애스터리스크를 붙이게 되면 전달인자를 packing” 해준다.
# 또한, 특정 함수에 값을 넘길때 “전달인자에 애스터리스크를 붙이면 전달 인자를 unpacking” 해준다

#######**정리#######
# 다음과 같이 회원의 이름과 나이를 키워드 인자로 받아서 출력해주는 함수가 있다고 하자.

# def print_customer_info(name, age):
#     print(f"name: {name}")
#     print(f"age: {age}")
# print_customer_info(name='lee', age='30')

# # 근데, 회원 정보에 ‘주소’ 라는 항목이 추가되면 어떻게 될까?
# def print_customer_info(name, age, address):
#     print(f"name: {name}")
#     print(f"age: {age}")
#     print(f"address: {address}")
# print_customer_info(name='lee', age='30', address='seoul')
# #매개변수에 주소를 받을 변수 address를 추가하고, 구현부에서도 이를 출력하는 부분을 추가해야한다.귀찮음

# from user.models import User
# from turtle import Turtle


from unittest import result


def print_customer_info(*args, **kwargs):
    # print(f"name: {kwargs['name']}")
    # print(f"age: {kwargs['age']}")
    # print(f"sex: {kwargs['sex']}")
    # print(f"address: {kwargs['address']}")
    print(args)
    print(kwargs)
    return True


my_list = [1, 2, 3, 4, 5]
my_dict = {
    'name': 'Lee',
    'age': '30',
    'sex': 'MAN',
    'address': 'seoul'
}
print_customer_info(*my_list, **my_dict)

# 이런 코드를
# def user(request):
#     if request.method == "POST" :
#         username = request.POST.get('username')
#         fullname = request.POST.get('fullname')
#         gender = request.POST.get('gender')
#         birthday = request.POST.get('birthday')

#         user = User.objects.create(
#            username = "username",
#            fullname = "fullname",
#            gender = "gender",
#            birthday = 'birthday'
#         )


# 이런식으로 할당 없이 사용할 수 있다.
# from user.models import User
#
# def user(request):
#     if request.method == "POST" :
#         user = User.objects.create(
#             **request.POST
#         )
## 정리##
# *args 형식을 사용하면 키 벨류 형식을 제외한 모든 형식을 받을 수 있다.
# *args 형식, **kwargs는형식을 사용하면 어떤 형식이든 받을 수 있다.
# kwargs는 dictionary형태로 값을 읽고 이 때, key와 value 값을 가지기 때문에 **를 사용한다.

# def my_sum(my_integers):
#     result = a+b+c
#     return result

# a = 1
# b = 2
# c = 3

# print(my_sum(a, b, c))
# # 여러게 넣으면 오류가난다.


# def my_sum(*args):
#     result = 0
#     for x in args:
#         result += x
#     return result

# # my_list = [1, 2, 3, 4, 5]

# print(my_sum(1, 2, 3, 4, 5))

#딕셔너리(dictionary)는 items()함수를 사용하면 딕셔너리에 있는 키와 값들의 쌍을 얻을 수 있습니다.
def print_customer_info(*args, **kwargs):
    # print(f"name: {kwargs['name']}")
    # print(f"age: {kwargs['age']}")
    # print(f"sex: {kwargs['sex']}")
    # print(f"address: {kwargs['address']}")
    print(args)
    print(kwargs)
    return True

my_list = [1, 2, 3, 'ㄴ', 4, 5]
my_dict = {
    'name': 'Lee',
    'age': '30',
    'sex': 'MAN',
    'address': 'seoul'
}
print_customer_info(*my_list, **my_dict)

 2. mutable과 immutable은 어떤 특성이 있고, 어떤 자료형이 어디에 해당하는지 서술하기
파이썬에는 변경가능한 객체(mutable) 과 변경불가능한 객체(immutable) 이 있습니다.
변경가능한 객체에는 리스트(list)와 딕셔너리(dict) 이 있습니다.
변경불가능한 객체에는 일반적인 자료형 int, string 등 과 튜플(tuple) 등이 있습니다.
일반적인 자료형이 속해있는 변경불가능한 객체(immutable) 부터 알아보겠습니다.
immutable
immutable 은 변경불가능한 객체입니다.
immutable 에는 일반적인 자료형과 튜플이 속해있습니다.
immutable 객체들은 값이 변경되는것이 새로운 객체로생성이 되기떄문에 변경이 일어날떄 기존 객체는 변하지 않습니다.

Int

a = 1                 #1
>>> id(a)
140729439544144
>>> a += 1            #2
>>> id(a)
140729439544176


String

a = 'a'               #a
>>> id(a)
1985199052704
>>> a += 'b'          #ab
>>> id(a)
1985209620944


Tuple

>>> a = (1,2)         #(1,2)
>>> id(a)
1985209935624
>>> a += (3,)         #(1,2,3)
>>> id(a)
1985209858448

immutable 에 속한 객체들은 값이 변경이될떄 객체가 변하는것을 확인 할 수 있습니다.
call-by-value (값에 의한 호출) 함수가 호출될 때, 메모리 공간 안에서는 함수를 위한 별도의 임시 공간이 생성된다.
따라서 함수 안에서 인자의 값이 변경되어도, 외부의 변수의 값은 변경되지 않는다.


Int

>>> a = 1
>>> b = a             #b = 1
>>> a == b            #a = 1 , b = 1
True
>>> b += 1            #b = 2
>>> a == b            #a = 1 , b = 2
False

String

>>> a = 'a'
>>> b = a             #b = 'a'
>>> a == b            #a = 'a' , b = 'a'
True
>>> b += 'b'          #b = 'ab'
>>> a == b            #a = 'a' , b = 'ab'
False

Tuple

>>> a = (1,2)
>>> b = a             #b = (1,2)
>>> a == b            #a = (1,2) , b = (1,2)
True
>>> b += (3,)         #b = (1,2,3)
>>> a == b            #a = (1,2) , b = (1,2,3)
False
mutable

mutable은 변경 가능한 객체입니다.



mutable에는 리스트와 딕셔너리 등이 속합니다.



List

>>> a = [1,2]         #a = [1,2]
>>> id(a)
1985209849032
>>> a.append(3)       #a = [1,2,3]
>>> id(a)
1985209849032
cs
Dict

>>> a = {1:'a'}       #a = {1:'a'}
>>> id(a)
1985209931096
>>> a[2] = 'b'        #a = {1:'a', 2:'b'}
>>> id(a)
1985209931096
cs
mutable 에 속한 객체들은 값이 변경이 일어날떄 객체의 값이 변경되는것을 확인 할 수 있습니다.



여기에 속한 객체들은 call by reference 속성을 가지고 있습니다.



List

>>> a = [1,2]
>>> b = a             #b = [1,2]
>>> a == b            #a = [1,2] , b = [1,2]
True
>>> b.append(3)       #b = [1,2,3]
>>> a == b            #a = [1,2,3] , b = [1,2,3]
True
Colored by Color Scripter
cs
Dict

>>> a = {1:'a'}
>>> b = a             #b = {1:'a'}
>>> a == b            #a = {1:'a'} , b = {1:'a'}
True
>>> b[2] = 'b'        #b = {1:'a',2:'b'}
>>> a == b            #a = {1:'a',2:'b'} , b = {1:'a',2:'b'}
True
Colored by Color Scripter
cs
mutable 객체들은 값의 변경이 일어날떄 주소가 참조하는 값이 모두 변경되는것을 확인 할 수 있습니다.

 3. DB Field에서 사용되는 Key 종류와 특징 서술하기
      # models.py
    class User(models.Model):
    username = models.CharField("사용자 계정", max_length=50, primary_key=True)
    password = models.CharField("비밀번호", max_length=200, unique=True)
    # User라는 테이블에 username, password라는 필드가 존재함
    # 사용자가 회원가입을 할 때마다 레코드가 하나씩 추가됨.
    # 즉, 레코드란 데이터베이스에 저장 되는 값들을 지칭하는 것
    - FK : Foreign Key의 약자이며, 다른 테이블을 참조 할 때 사용된다.
    - UK : Unique Key의 약자이며, 중복 값을 허용하지 않는다.
    - PK : Primary Key의 약자이며, 테이블에서 반드시 존재해야 한다.
    - PK는 두개 이상 존재 할 수 없고, UK와 마찬가지로 중복 값을 허용하지 않는다.
    - Foreign Key를 사용할 경우 참조 할 테이블의 PK를 바라본다.

 4. django에서 queryset과 object는 어떻게 다른지 서술하기
장고는 쿼리셋을 이용해서 데이터를 가져오는데,
queryset은 쿼리문을 이용해서 데이터를 가져오는 object이다.

